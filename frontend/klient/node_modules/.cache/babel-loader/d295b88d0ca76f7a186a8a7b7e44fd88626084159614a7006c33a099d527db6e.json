{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bober\\\\OneDrive\\\\Pulpit\\\\projekt\\\\klient\\\\src\\\\components\\\\ChatRoom2.js\";\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nconst onConnected = () => {\n  setUserData({\n    ...userData,\n    \"connected\": true\n  });\n  stompClient.subscribe('/chatroom/public', onMessageReceived);\n  stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n  userJoin();\n};\nconst onMessageReceived = payload => {\n  var payloadData = JSON.parse(payload.body);\n  switch (payloadData.status) {\n    case \"JOIN\":\n      if (!privateChats.get(payloadData.senderName)) {\n        privateChats.set(payloadData.senderName, []);\n        setPrivateChats(new Map(privateChats));\n      }\n      break;\n    case \"MESSAGE\":\n      publicChats.push(payloadData);\n      setPublicChats([...publicChats]);\n      break;\n  }\n};\nconst onPrivateMessage = payload => {\n  console.log(payload);\n  var payloadData = JSON.parse(payload.body);\n  if (privateChats.get(payloadData.senderName)) {\n    privateChats.get(payloadData.senderName).push(payloadData);\n    setPrivateChats(new Map(privateChats));\n  } else {\n    let list = [];\n    list.push(payloadData);\n    privateChats.set(payloadData.senderName, list);\n    setPrivateChats(new Map(privateChats));\n  }\n};\nconst onError = () => {};\nclass ChatRoom2 extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [this.props.name, \" - napisz\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          rows: \"4\",\n          cols: \"50\",\n          name: \"comment\",\n          form: \"usrform\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this);\n  }\n  connect() {\n    let Sock = new SockJS('http://localhost:8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  }\n}\nexport default ChatRoom2;","map":{"version":3,"names":["React","useEffect","useState","over","SockJS","jsxDEV","_jsxDEV","stompClient","onConnected","setUserData","userData","subscribe","onMessageReceived","username","onPrivateMessage","userJoin","payload","payloadData","JSON","parse","body","status","privateChats","get","senderName","set","setPrivateChats","Map","publicChats","push","setPublicChats","console","log","list","onError","ChatRoom2","Component","render","className","children","props","name","fileName","_jsxFileName","lineNumber","columnNumber","rows","cols","form","type","value","connect","Sock"],"sources":["C:/Users/bober/OneDrive/Pulpit/projekt/klient/src/components/ChatRoom2.js"],"sourcesContent":["\r\nimport React, { useEffect, useState } from 'react'\r\nimport {over} from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\n\r\n\r\nvar stompClient =null;\r\n\r\nconst onConnected =()=>{      \r\n    setUserData({...userData,\"connected\": true});\r\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n    stompClient.subscribe('/user/'+userData.username+'/private', onPrivateMessage);\r\n    userJoin();\r\n}\r\n\r\nconst onMessageReceived = (payload)=>{\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch(payloadData.status){\r\n        case \"JOIN\":\r\n            if(!privateChats.get(payloadData.senderName)){\r\n                privateChats.set(payloadData.senderName,[]);\r\n                setPrivateChats(new Map(privateChats));\r\n            }\r\n            break;\r\n        case \"MESSAGE\":\r\n            publicChats.push(payloadData);\r\n            setPublicChats([...publicChats]);\r\n            break;\r\n    }\r\n}\r\n\r\nconst onPrivateMessage = (payload)=>{\r\n    console.log(payload);\r\n    var payloadData = JSON.parse(payload.body);\r\n    if(privateChats.get(payloadData.senderName)){\r\n        privateChats.get(payloadData.senderName).push(payloadData);\r\n        setPrivateChats(new Map(privateChats));\r\n    }else{\r\n        let list =[];\r\n        list.push(payloadData);\r\n        privateChats.set(payloadData.senderName,list);\r\n        setPrivateChats(new Map(privateChats));\r\n    }\r\n}\r\nconst onError=()=>{}\r\nclass ChatRoom2 extends React.Component {\r\n    \r\n    \r\n    render() {\r\n      return (\r\n        <div className=\"post\">\r\n          <h1>{this.props.name} - napisz</h1>\r\n        \r\n        <form>\r\n            <textarea rows=\"4\" cols=\"50\" name=\"comment\" form=\"usrform\"></textarea>\r\n            <input type=\"submit\" value=\"Submit\"></input>\r\n        </form>\r\n        </div>\r\n      );\r\n    }\r\n     connect() {\r\n        let Sock = new SockJS('http://localhost:8080/ws');\r\n        stompClient = over(Sock);\r\n        stompClient.connect({},onConnected, onError); \r\n     }\r\n  }\r\n  export default ChatRoom2"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}