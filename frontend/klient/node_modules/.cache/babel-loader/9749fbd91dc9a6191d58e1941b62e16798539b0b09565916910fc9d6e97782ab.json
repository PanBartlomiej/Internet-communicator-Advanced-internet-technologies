{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bober\\\\OneDrive\\\\Pulpit\\\\projekt\\\\klient\\\\src\\\\components\\\\AddPost.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AddPost() {\n  _s();\n  const [message, setMessage] = useState('');\n  const [socket, setSocket] = useState(null);\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    // Connect to WebSocket server\n    const newSocket = new WebSocket('wss://localhost:8080/ws');\n    setSocket(newSocket);\n\n    // Clean up the WebSocket connection on component unmount\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n  useEffect(() => {\n    if (!socket) return;\n\n    // Handle incoming messages from WebSocket server\n    socket.onmessage = event => {\n      const receivedPost = JSON.parse(event.data);\n      setPosts(prevPosts => [...prevPosts, receivedPost]);\n    };\n  }, [socket]);\n  const addPost = () => {\n    const post = {\n      message: message,\n      date: new Date(),\n      owner: \"michalAnioł@pocztowykod.com\",\n      // Set the owner appropriately\n      chatroom_id: 1 // Set the chatroom_id appropriately\n    };\n\n    // Send the post object to the backend via WebSocket\n    socket.send(JSON.stringify(post));\n\n    // Clear the input field after adding the post\n    setMessage('');\n  };\n\n  // useEffect(() => {\n  //   // Fetch initial posts from the backend\n  //   const fetchPosts = async () => {\n  //     try {\n  //       const response = await axios.get('http://localhost:8080/posts');\n  //       setPosts(response.data);\n  //     } catch (error) {\n  //       console.error('Error fetching posts:', error);\n  //     }\n  //   };\n\n  //   fetchPosts();\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Dodaj post\",\n      value: message,\n      onChange: e => setMessage(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addPost,\n      children: \"Dodaj post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: post.message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(AddPost, \"VhfoqhCRo0u1u7sFVeHvUKH6Or8=\");\n_c = AddPost;\nexport default AddPost;\nvar _c;\n$RefreshReg$(_c, \"AddPost\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","AddPost","_s","message","setMessage","socket","setSocket","posts","setPosts","newSocket","WebSocket","close","onmessage","event","receivedPost","JSON","parse","data","prevPosts","addPost","post","date","Date","owner","chatroom_id","send","stringify","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","_c","$RefreshReg$"],"sources":["C:/Users/bober/OneDrive/Pulpit/projekt/klient/src/components/AddPost.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction AddPost() {\r\n  const [message, setMessage] = useState('');\r\n  const [socket, setSocket] = useState(null);\r\n  const [posts, setPosts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Connect to WebSocket server\r\n    const newSocket = new WebSocket('wss://localhost:8080/ws');\r\n    setSocket(newSocket);\r\n\r\n    // Clean up the WebSocket connection on component unmount\r\n    return () => {\r\n      newSocket.close();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n\r\n    // Handle incoming messages from WebSocket server\r\n    socket.onmessage = event => {\r\n      const receivedPost = JSON.parse(event.data);\r\n      setPosts(prevPosts => [...prevPosts, receivedPost]);\r\n    };\r\n  }, [socket]);\r\n\r\n  const addPost = () => {\r\n    const post = {\r\n      message: message,\r\n      date: new Date(),\r\n      owner: \"michalAnioł@pocztowykod.com\", // Set the owner appropriately\r\n      chatroom_id: 1, // Set the chatroom_id appropriately\r\n    };\r\n\r\n    // Send the post object to the backend via WebSocket\r\n    socket.send(JSON.stringify(post));\r\n\r\n    // Clear the input field after adding the post\r\n    setMessage('');\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   // Fetch initial posts from the backend\r\n  //   const fetchPosts = async () => {\r\n  //     try {\r\n  //       const response = await axios.get('http://localhost:8080/posts');\r\n  //       setPosts(response.data);\r\n  //     } catch (error) {\r\n  //       console.error('Error fetching posts:', error);\r\n  //     }\r\n  //   };\r\n\r\n  //   fetchPosts();\r\n  // }, []);\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Dodaj post\"\r\n        value={message}\r\n        onChange={e => setMessage(e.target.value)}\r\n      />\r\n      <button onClick={addPost}>Dodaj post</button>\r\n\r\n      <ul>\r\n        {posts.map((post, index) => (\r\n          <li key={index}>{post.message}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddPost;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMY,SAAS,GAAG,IAAIC,SAAS,CAAC,yBAAyB,CAAC;IAC1DJ,SAAS,CAACG,SAAS,CAAC;;IAEpB;IACA,OAAO,MAAM;MACXA,SAAS,CAACE,KAAK,EAAE;IACnB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAENd,SAAS,CAAC,MAAM;IACd,IAAI,CAACQ,MAAM,EAAE;;IAEb;IACAA,MAAM,CAACO,SAAS,GAAGC,KAAK,IAAI;MAC1B,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC;MAC3CT,QAAQ,CAACU,SAAS,IAAI,CAAC,GAAGA,SAAS,EAAEJ,YAAY,CAAC,CAAC;IACrD,CAAC;EACH,CAAC,EAAE,CAACT,MAAM,CAAC,CAAC;EAEZ,MAAMc,OAAO,GAAGA,CAAA,KAAM;IACpB,MAAMC,IAAI,GAAG;MACXjB,OAAO,EAAEA,OAAO;MAChBkB,IAAI,EAAE,IAAIC,IAAI,EAAE;MAChBC,KAAK,EAAE,6BAA6B;MAAE;MACtCC,WAAW,EAAE,CAAC,CAAE;IAClB,CAAC;;IAED;IACAnB,MAAM,CAACoB,IAAI,CAACV,IAAI,CAACW,SAAS,CAACN,IAAI,CAAC,CAAC;;IAEjC;IACAhB,UAAU,CAAC,EAAE,CAAC;EAChB,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA,oBACEJ,OAAA;IAAA2B,QAAA,gBACE3B,OAAA;MACE4B,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,YAAY;MACxBC,KAAK,EAAE3B,OAAQ;MACf4B,QAAQ,EAAEC,CAAC,IAAI5B,UAAU,CAAC4B,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC1C,eACFrC,OAAA;MAAQsC,OAAO,EAAEnB,OAAQ;MAAAQ,QAAA,EAAC;IAAU;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,eAE7CrC,OAAA;MAAA2B,QAAA,EACGpB,KAAK,CAACgC,GAAG,CAAC,CAACnB,IAAI,EAAEoB,KAAK,kBACrBxC,OAAA;QAAA2B,QAAA,EAAiBP,IAAI,CAACjB;MAAO,GAApBqC,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACf;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACD;AAEV;AAACnC,EAAA,CAxEQD,OAAO;AAAAwC,EAAA,GAAPxC,OAAO;AA0EhB,eAAeA,OAAO;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}