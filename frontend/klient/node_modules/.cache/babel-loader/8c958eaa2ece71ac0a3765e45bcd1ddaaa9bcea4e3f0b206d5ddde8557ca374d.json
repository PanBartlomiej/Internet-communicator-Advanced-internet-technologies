{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bober\\\\OneDrive\\\\Pulpit\\\\projekt\\\\klient\\\\src\\\\components\\\\AddPost.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport SockJS from 'sockjs-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AddPost() {\n  _s();\n  const [message, setMessage] = useState('');\n  const [socket, setSocket] = useState(null);\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    // Connect to WebSocket server\n    const newSocket = new SockJS('http://localhost:8080/ws');\n    setSocket(newSocket);\n\n    // Clean up the WebSocket connection on component unmount\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n  useEffect(() => {\n    if (!socket) return;\n\n    // Handle incoming messages from WebSocket server\n    socket.onmessage = event => {\n      const receivedPost = JSON.parse(event.data);\n      setPosts(prevPosts => [...prevPosts, receivedPost]);\n    };\n  }, [socket]);\n  const addPost = () => {\n    const post = {\n      message: message,\n      date: new Date(),\n      owner: null,\n      // Set the owner appropriately\n      chatroom_id: null // Set the chatroom_id appropriately\n    };\n\n    // Send the post object to the backend via WebSocket\n    socket.send(JSON.stringify(post));\n\n    // Clear the input field after adding the post\n    setMessage('');\n  };\n  useEffect(() => {\n    // Fetch initial posts from the backend\n    const fetchPosts = async () => {\n      try {\n        const response = await axios.get('http://localhost:8080/posts1');\n        setPosts(response.data);\n      } catch (error) {\n        console.error('Error fetching posts:', error);\n      }\n    };\n    fetchPosts();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Dodaj post\",\n      value: message,\n      onChange: e => setMessage(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addPost,\n      children: \"Dodaj post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: post.message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(AddPost, \"+id5Wv10MmVlWo0G1GaEzMvynwg=\");\n_c = AddPost;\nexport default AddPost;\nvar _c;\n$RefreshReg$(_c, \"AddPost\");","map":{"version":3,"names":["React","useState","useEffect","axios","SockJS","jsxDEV","_jsxDEV","AddPost","_s","message","setMessage","socket","setSocket","posts","setPosts","newSocket","close","onmessage","event","receivedPost","JSON","parse","data","prevPosts","addPost","post","date","Date","owner","chatroom_id","send","stringify","fetchPosts","response","get","error","console","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","_c","$RefreshReg$"],"sources":["C:/Users/bober/OneDrive/Pulpit/projekt/klient/src/components/AddPost.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport SockJS from 'sockjs-client';\r\nfunction AddPost() {\r\n  const [message, setMessage] = useState('');\r\n  const [socket, setSocket] = useState(null);\r\n  const [posts, setPosts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Connect to WebSocket server\r\n    const newSocket = new SockJS('http://localhost:8080/ws');\r\n    setSocket(newSocket);\r\n\r\n    // Clean up the WebSocket connection on component unmount\r\n    return () => {\r\n      newSocket.close();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n\r\n    // Handle incoming messages from WebSocket server\r\n    socket.onmessage = event => {\r\n      const receivedPost = JSON.parse(event.data);\r\n      setPosts(prevPosts => [...prevPosts, receivedPost]);\r\n    };\r\n  }, [socket]);\r\n\r\n  const addPost = () => {\r\n    const post = {\r\n      message: message,\r\n      date: new Date(),\r\n      owner: null, // Set the owner appropriately\r\n      chatroom_id: null, // Set the chatroom_id appropriately\r\n    };\r\n\r\n    // Send the post object to the backend via WebSocket\r\n    socket.send(JSON.stringify(post));\r\n\r\n    // Clear the input field after adding the post\r\n    setMessage('');\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Fetch initial posts from the backend\r\n    const fetchPosts = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:8080/posts1');\r\n        setPosts(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching posts:', error);\r\n      }\r\n    };\r\n\r\n    fetchPosts();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Dodaj post\"\r\n        value={message}\r\n        onChange={e => setMessage(e.target.value)}\r\n      />\r\n      <button onClick={addPost}>Dodaj post</button>\r\n\r\n      <ul>\r\n        {posts.map((post, index) => (\r\n          <li key={index}>{post.message}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddPost;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}